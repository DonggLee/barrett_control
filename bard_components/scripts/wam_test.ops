
import("bard_components")

import("kdl_typekit")

import("rtt_sensor_msgs")
import("rtt_trajectory_msgs")
import("rtt_geometry_msgs")

//// Set up left WAM + Controller
// Create WAM
var string wam_name = "wam_left"
loadComponent(wam_name,"bard_components::WAM")
setActivity(wam_name,0.01,HighestPriority,ORO_SCHED_RT)

// Load properties from rosparam
loadService(wam_name,"rosparam")
wam_left.rosparam.refreshProperties()
wam_left.rosparam.storeProperties()

// Connect WAM state to ROS topic
stream(wam_name+".joint_state_out", ros.topic("wam_rtt/"+wam_name+"/joint_states")) 

// Create trivial controller
loadComponent(wam_name+"_con_trivial","bard_components::controllers::Trivial")
setActivity(wam_name+"_con_trivial",0.001,HighestPriority,ORO_SCHED_RT)
connect(wam_name+".torques_in",wam_name+"_con_trivial.torques_out",ConnPolicy())
wam_left_con_trivial.configure()

// Create gravity controller
loadComponent("wam_left_con_grav","bard_components::controllers::GravityCompensation")
setActivity("wam_left_con_grav",0.001,HighestPriority,ORO_SCHED_RT)

connectServices("wam_left", "wam_left_con_grav")
connect("wam_left.positions_out","wam_left_con_grav.positions_in",ConnPolicy())
connect("wam_left.torques_in","wam_left_con_grav.torques_out",ConnPolicy())
stream("wam_left_con_grav.joint_state_out", ros.topic("wam_rtt/wam_left/con_grav/joint_states")) 

loadService("wam_left_con_grav","rosparam")
wam_left_con_grav.rosparam.refreshProperties()
wam_left_con_grav.rosparam.storeProperties()
//wam_left_con_grav.gravity = KDL.Vector(-9.8,0,0)

wam_left_con_grav.configure()

// Start controller
wam_left_con_grav.start()

wam_left.configure()
wam_left.start()

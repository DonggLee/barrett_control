
import("bard_components")

import("kdl_typekit")

import("rtt_sensor_msgs")
import("rtt_trajectory_msgs")
import("rtt_geometry_msgs")
import("rtt_bard_msgs")

// Set up TF
import("rtt_tf")
loadComponent("tf","rtt_tf::RTT_TF")
tf.configure()
tf.start()

//// Set up left WAM + Controller
///////////////////////////////////////////////////////////////////////////////
// Create WAM /////////////////////////////////////////////////////////////////
loadComponent("wam_left","bard_components::WAM")
setActivity("wam_left",0.001,HighestPriority,ORO_SCHED_RT)

// Load properties from rosparam
loadService("wam_left","rosparam")
wam_left.rosparam.refreshProperties()

// Connect WAM state to ROS topic
stream("wam_left.joint_state_out", ros.topic("wam_rtt/wam_left/joint_states")) 

///////////////////////////////////////////////////////////////////////////////
// Create multiplexer /////////////////////////////////////////////////////////
loadComponent("wam_left_mux","bard_components::ControllerMux")
setActivity("wam_left_mux",0,HighestPriority,ORO_SCHED_RT)
stream("wam_left_mux.joint_state_out", ros.topic("wam_rtt/wam_left_mux/joint_states")) 

// Configure parameters
loadService("wam_left_mux","rosparam")
wam_left_mux.rosparam.refreshProperties()
wam_left_mux.configure()

// Connect mux to wam
connect("wam_left.positions_out","wam_left_mux.positions_in",ConnPolicy())
connect("wam_left_mux.torques_out","wam_left.torques_in",ConnPolicy())


///////////////////////////////////////////////////////////////////////////////
// Create trivial controller //////////////////////////////////////////////////
/*
loadComponent("wam_left_con_trivial","bard_components::controllers::Trivial")
setActivity("wam_left_con_trivial",0.001,HighestPriority,ORO_SCHED_RT)

connect("wam_left.positions_out","wam_left_con_trivial.positions_in",ConnPolicy())

// Configure parameters
loadService("wam_left_con_trivial","rosparam")
wam_left_con_trivial.rosparam.refreshProperties()
wam_left_con_trivial.configure()

// Connect controller to mux
wam_left_mux.load("trivial")
connect("wam_left_con_trivial.torques_out","wam_left_mux.trivial",ConnPolicy())
*/

///////////////////////////////////////////////////////////////////////////////
// Create gravity controller //////////////////////////////////////////////////
loadComponent("wam_left_con_grav","bard_components::controllers::GravityCompensation")
setActivity("wam_left_con_grav",0,HighestPriority,ORO_SCHED_RT)

connect("wam_left.positions_out","wam_left_con_grav.positions_in",ConnPolicy())

// Configure parameters
loadService("wam_left_con_grav","rosparam")
wam_left_con_grav.rosparam.refreshProperties()
wam_left_con_grav.configure()

// Connect controller to mux
wam_left_mux.load("gravity")
connect("wam_left_con_grav.torques_out","wam_left_mux.gravity",ConnPolicy())

///////////////////////////////////////////////////////////////////////////////
// Create cartesian wrench controller /////////////////////////////////////////
/*
loadComponent("wam_left_con_wrench","bard_components::controllers::CartesianWrench")
setActivity("wam_left_con_wrench",0.001,HighestPriority,ORO_SCHED_RT)
connectPeers("tf","wam_left_con_wrench")

connect("wam_left.positions_out","wam_left_con_wrench.positions_in",ConnPolicy())

// Configure parameters
loadService("wam_left_con_wrench","rosparam")
wam_left_con_wrench.rosparam.refreshProperties()
wam_left_con_wrench.configure()

// Connect controller to mux
wam_left_mux.load("wrench")
connect("wam_left_con_wrench.torques_out","wam_left_mux.wrench",ConnPolicy())
*/

///////////////////////////////////////////////////////////////////////////////
// Create cartesian pose  controller //////////////////////////////////////////
loadComponent("wam_left_con_pose","bard_components::controllers::CartesianPose")
setActivity("wam_left_con_pose",0,HighestPriority,ORO_SCHED_RT)
connectPeers("tf","wam_left_con_pose")

connect("wam_left.positions_out","wam_left_con_pose.positions_in",ConnPolicy())

// Configure parameters
loadService("wam_left_con_pose","rosparam")
wam_left_con_pose.rosparam.refreshProperties()
wam_left_con_pose.configure()

// Connect controller to mux
wam_left_mux.load("pose")
connect("wam_left_con_pose.torques_out","wam_left_mux.pose",ConnPolicy())

// Connect WAM state to ROS topic
stream("wam_left_con_pose.joint_state_out", ros.topic("wam_rtt/wam_left_con_pose/joint_states")) 

///////////////////////////////////////////////////////////////////////////////
// Start Things ///////////////////////////////////////////////////////////////
wam_left.configure()
wam_left.start()

wam_left_mux.start()
//wam_left_con_trivial.start()
wam_left_con_grav.start()
//wam_left_con_wrench.start()
//wam_left_con_pose.start()

wam_left_mux.disable()
wam_left_mux.toggleControllers(strings("gravity"),strings())
//wam_left_mux.toggleControllers(strings("pose"),strings())
//wam_left_mux.toggleControllers(strings("trivial"),strings("gravity"))
//wam_left_mux.toggleControllers(strings("gravity"),strings("trivial"))
